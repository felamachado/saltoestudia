# ================================================================================
# SCRIPT DE POBLADO INICIAL - SALTO ESTUDIA
# ================================================================================
#
# Este script inicializa la base de datos con datos fundamentales del sistema.
# Es cr√≠tico para el funcionamiento y debe ejecutarse despu√©s de las migraciones.
#
# PROP√ìSITO:
# - Poblar instituciones educativas de Salto, Uruguay
# - Crear usuarios administradores con contrase√±as individuales desde .env
# - Cargar cursos de ejemplo para cada instituci√≥n
# - Verificar integridad de datos antes de proceder
#
# SISTEMA DE CONTRASE√ëAS INDIVIDUALES:
# - Cada instituci√≥n tiene su propia contrase√±a desde variables de entorno
# - Las contrase√±as se hashean con bcrypt antes de almacenar
# - Sistema completamente seguro y escalable para producci√≥n
#
# EJECUCI√ìN:
# - Desde Docker: docker compose exec app python seed.py
# - Desde local: python seed.py (requiere .env configurado)
# - Idempotente: puede ejecutarse m√∫ltiples veces sin duplicar datos
#
# ARCHIVOS RELACIONADOS:
# - .env: Contiene las contrase√±as reales por instituci√≥n
# - .env.example: Plantilla para el equipo de desarrollo
# - models.py: Define las estructuras de datos a poblar
# - constants.py: Valida los datos antes de insertar
# ================================================================================

import sqlite3
import bcrypt
import os

# ================================================================================
# FUNCIONES UTILITARIAS DE SEGURIDAD
# ================================================================================

def hash_password(password: str) -> str:
    """
    Hashea una contrase√±a usando bcrypt con salt autom√°tico.
    
    bcrypt es el est√°ndar de la industria para hash de contrase√±as porque:
    - Incluye salt autom√°tico (previene rainbow table attacks)
    - Es computacionalmente costoso (previene brute force)
    - El costo puede ajustarse con el tiempo seg√∫n hardware disponible
    
    Args:
        password: Contrase√±a en texto plano
        
    Returns:
        str: Hash bcrypt seguro para almacenar en base de datos
        
    Utilizado en:
        - Creaci√≥n inicial de usuarios administradores
        - Verificaci√≥n posterior en state.py con bcrypt.checkpw()
    """
    hashed_bytes = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    return hashed_bytes.decode('utf-8')

def get_password_for_user(env_var: str, default: str) -> str:
    """
    Obtiene contrase√±a desde variable de entorno o usa fallback por defecto.
    
    Este patr√≥n permite:
    - Desarrollo local: usar contrase√±as por defecto
    - Producci√≥n: usar contrase√±as seguras desde .env
    - Flexibilidad: cada instituci√≥n puede tener contrase√±a √∫nica
    
    Args:
        env_var: Nombre de la variable de entorno (ej: "CENUR_PASSWORD")
        default: Contrase√±a por defecto si no existe la variable
        
    Returns:
        str: Contrase√±a a usar para el usuario
        
    Patr√≥n de uso:
        password = get_password_for_user("CENUR_PASSWORD", "default_pass")
    """
    return os.getenv(env_var, default)

# ================================================================================
# FUNCI√ìN PRINCIPAL DE POBLADO
# ================================================================================

def seed_database():
    """
    Funci√≥n principal que puebla la base de datos con datos iniciales.
    
    FLUJO DE EJECUCI√ìN:
    1. Verificar si ya hay datos (idempotencia)
    2. Insertar instituciones educativas de Salto
    3. Crear usuarios administradores con contrase√±as individuales
    4. Cargar cursos de ejemplo para cada instituci√≥n
    5. Mostrar resumen de seguridad y recomendaciones
    
    DATOS CARGADOS:
    - 5 instituciones reales de Salto, Uruguay
    - 5 usuarios administradores (uno por instituci√≥n)
    - 10 cursos de ejemplo distribuidos entre instituciones
    
    SEGURIDAD IMPLEMENTADA:
    - Contrase√±as individuales por instituci√≥n desde .env
    - Hash bcrypt para todas las contrase√±as
    - Verificaci√≥n de variables de entorno vs defaults
    - Logging detallado para auditor√≠a
    
    IDEMPOTENCIA:
    - Verifica datos existentes antes de proceder
    - No duplica informaci√≥n si ya existe
    - Seguro ejecutar m√∫ltiples veces
    
    Returns:
        bool: True si exitoso, False si fall√≥
    """
    db_path = "/app/data/saltoestudia.db"
    
    try:
        print("üîó Conectando a la base de datos...")
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Verificar si ya hay datos
        cursor.execute("SELECT COUNT(*) FROM instituciones")
        count_instituciones = cursor.fetchone()[0]
        
        if count_instituciones > 0:
            print(f"üìä La base de datos ya tiene datos ({count_instituciones} instituciones).")
            cursor.execute("SELECT COUNT(*) FROM usuarios")
            count_usuarios = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM cursos")
            count_cursos = cursor.fetchone()[0]
            print(f"   Usuarios: {count_usuarios}, Cursos: {count_cursos}")
            print("‚úÖ Base de datos ya est√° poblada.")
            conn.close()
            return True
        
        print("üè¢ Insertando instituciones...")
        
        instituciones = [
            ("UDELAR ‚Äì CENUR LN", "Rivera 1350", "47334816", "comunicacion@unorte.edu.uy", "https://www.litoralnorte.udelar.edu.uy/", "/logos/logo-cenur.png"),
            ("IAE Salto", "Misiones 192", "47354602", "iaesalto@gmail.com", None, "/logos/logoutu.png"),
            ("Esc. Catalina H. de Casta√±os", "Varela 440", "47335987", "ttssalto@gmail.com", None, "/logos/logoutu.png"),
            ("Esc. De Administraci√≥n", "Juan C. Gomez 351", "47323778", "etays.salto@gmail.com", None, "/logos/logoutu.png"),
            ("Esc. Agraria", "Ruta a Salto Grande S/N", "47322862", "esagrariasalto@gmail.com", None, "/logos/logoutu.png")
        ]
        
        for inst in instituciones:
            cursor.execute("""
                INSERT INTO instituciones (nombre, direccion, telefono, email, web, logo)
                VALUES (?, ?, ?, ?, ?, ?)
            """, inst)
            print(f"   ‚úÖ {inst[0]}")
        
        print("üë• Insertando usuarios con contrase√±as individuales...")
        
        # Obtener contrase√±a por defecto
        default_password = os.getenv("DEFAULT_SEED_PASSWORD", "CHANGE_THIS_PASSWORD_NOW")
        
        # Crear usuarios con contrase√±as individuales desde .env
        usuarios_config = [
            {
                "email": "cenur@cenur.com",
                "env_var": "CENUR_PASSWORD",
                "institucion_id": 1,
                "institucion_nombre": "UDELAR ‚Äì CENUR LN"
            },
            {
                "email": "iae@iae.com", 
                "env_var": "IAE_PASSWORD",
                "institucion_id": 2,
                "institucion_nombre": "IAE Salto"
            },
            {
                "email": "catalina@catalina.com",
                "env_var": "CATALINA_PASSWORD", 
                "institucion_id": 3,
                "institucion_nombre": "Esc. Catalina H. de Casta√±os"
            },
            {
                "email": "administracion@administracion.com",
                "env_var": "ADMINISTRACION_PASSWORD",
                "institucion_id": 4,
                "institucion_nombre": "Esc. De Administraci√≥n"
            },
            {
                "email": "agraria@agraria.com",
                "env_var": "AGRARIA_PASSWORD",
                "institucion_id": 5,
                "institucion_nombre": "Esc. Agraria"
            }
        ]
        
        usuarios_insertados = []
        for config in usuarios_config:
            # Obtener contrase√±a individual o usar la por defecto
            password = get_password_for_user(config["env_var"], default_password)
            hashed_password = hash_password(password)
            
            usuario_data = (config["email"], hashed_password, config["institucion_id"])
            cursor.execute("""
                INSERT INTO usuarios (correo, password_hash, institucion_id)
                VALUES (?, ?, ?)
            """, usuario_data)
            
            usuarios_insertados.append({
                "email": config["email"],
                "institucion": config["institucion_nombre"],
                "env_var": config["env_var"],
                "has_custom_password": os.getenv(config["env_var"]) is not None
            })
            
            print(f"   ‚úÖ {config['email']} - {config['institucion_nombre']}")
        
        print("üìö Insertando cursos...")
        
        cursos = [
            # UDELAR ‚Äì CENUR LN (id=1)
            ("Licenciatura en Inform√°tica", "Universitario", "4", "a√±os", "Bachillerato", "Programa con fuerte √©nfasis en desarrollo de software.", 1),
            ("Taller de Introducci√≥n a la Rob√≥tica", "Terciario", "6", "meses", "Ciclo b√°sico", "Laboratorio con kits Arduino incluidos.", 1),
            
            # IAE Salto (id=2)
            ("Gesti√≥n de Emprendimientos", "Terciario", "5", "meses", "Bachillerato", "Plan de negocios y mentor√≠a con incubadoras locales.", 2),
            ("Marketing Digital y E-Commerce", "Terciario", "4", "meses", "Ciclo b√°sico", "Campa√±as reales en redes sociales.", 2),
            
            # Esc. Catalina H. de Casta√±os (id=3)
            ("Electricidad Domiciliaria", "Terciario", "4", "meses", "Ciclo b√°sico", "Pr√°cticas en instalaciones reales.", 3),
            ("Carpinter√≠a B√°sica", "Terciario", "6", "meses", "Ciclo b√°sico", "Proyectos pr√°cticos.", 3),
            
            # Esc. De Administraci√≥n (id=4)
            ("Administraci√≥n de Empresas", "Bachillerato", "3", "a√±os", "Ciclo b√°sico", "Formaci√≥n integral en gesti√≥n empresarial.", 4),
            ("Contabilidad B√°sica", "Terciario", "6", "meses", "Ciclo b√°sico", "Uso de software contable.", 4),
            
            # Esc. Agraria (id=5)
            ("T√©cnico Agropecuario", "Bachillerato", "3", "a√±os", "Ciclo b√°sico", "Pr√°cticas en campo y laboratorio propio.", 5),
            ("Horticultura Org√°nica", "Terciario", "8", "meses", "Ciclo b√°sico", "Invernadero experimental.", 5)
        ]
        
        for curso in cursos:
            cursor.execute("""
                INSERT INTO cursos (nombre, nivel, duracion_numero, duracion_unidad, requisitos_ingreso, informacion, institucion_id)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, curso)
            print(f"   ‚úÖ {curso[0]}")
        
        # Confirmar cambios
        conn.commit()
        
        print("\nüéâ ¬°Base de datos poblada exitosamente!")
        print(f"üìä Se crearon {len(instituciones)} instituciones, {len(usuarios_insertados)} usuarios y {len(cursos)} cursos.")
        
        # Mostrar informaci√≥n de seguridad
        print("\nüîë Usuarios creados con contrase√±as individuales:")
        users_with_custom = 0
        for usuario in usuarios_insertados:
            status = "üîê Personalizada" if usuario["has_custom_password"] else "‚ö†Ô∏è Por defecto"
            print(f"   üìß {usuario['email']}")
            print(f"      üè¢ {usuario['institucion']}")
            print(f"      üîë Variable: {usuario['env_var']} - {status}")
            if usuario["has_custom_password"]:
                users_with_custom += 1
        
        print(f"\nüìä Resumen de seguridad:")
        print(f"   ‚úÖ Usuarios con contrase√±a personalizada: {users_with_custom}")
        print(f"   ‚ö†Ô∏è Usuarios con contrase√±a por defecto: {len(usuarios_insertados) - users_with_custom}")
        
        if users_with_custom < len(usuarios_insertados):
            print(f"\n‚ö†Ô∏è  RECOMENDACI√ìN DE SEGURIDAD:")
            print(f"   Algunos usuarios usan la contrase√±a por defecto.")
            print(f"   En producci√≥n, configura todas las variables en el .env")
        
        conn.close()
        return True
            
    except Exception as e:
        print(f"‚ùå Error durante el seed de la base de datos: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = seed_database()
    if success:
        print("\n‚úÖ Seed completado exitosamente.")
    else:
        print("\n‚ùå Seed fall√≥. Revisa los errores anteriores.")
        exit(1)