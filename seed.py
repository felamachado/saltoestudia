# ================================================================================
# SCRIPT DE POBLADO INICIAL - SALTO ESTUDIA
# ================================================================================
#
# Este script inicializa la base de datos con datos fundamentales del sistema.
# Es cr√≠tico para el funcionamiento y debe ejecutarse despu√©s de las migraciones.
#
# PROP√ìSITO:
# - Poblar instituciones educativas de Salto, Uruguay
# - Crear usuarios administradores con contrase√±as individuales desde .env
# - Cargar cursos de ejemplo para cada instituci√≥n
# - Verificar integridad de datos antes de proceder
#
# SISTEMA DE CONTRASE√ëAS INDIVIDUALES:
# - Cada instituci√≥n tiene su propia contrase√±a desde variables de entorno
# - Las contrase√±as se hashean con bcrypt antes de almacenar
# - Sistema completamente seguro y escalable para producci√≥n
#
# EJECUCI√ìN:
# - Desde Docker: docker compose exec app python seed.py
# - Desde local: python seed.py (requiere .env configurado)
# - Idempotente: puede ejecutarse m√∫ltiples veces sin duplicar datos
#
# ARCHIVOS RELACIONADOS:
# - .env: Contiene las contrase√±as reales por instituci√≥n
# - .env.example: Plantilla para el equipo de desarrollo
# - models.py: Define las estructuras de datos a poblar
# - constants.py: Valida los datos antes de insertar
# ================================================================================

import bcrypt
import os
from sqlmodel import create_engine, Session, select
from saltoestudia.models import Institucion, Usuario, Curso, Ciudad, CursoCiudadLink, Sede
from saltoestudia.database import engine

# ================================================================================
# FUNCIONES UTILITARIAS DE SEGURIDAD
# ================================================================================

def hash_password(password: str) -> str:
    """
    Hashea una contrase√±a usando bcrypt con salt autom√°tico.
    
    bcrypt es el est√°ndar de la industria para hash de contrase√±as porque:
    - Incluye salt autom√°tico (previene rainbow table attacks)
    - Es computacionalmente costoso (previene brute force)
    - El costo puede ajustarse con el tiempo seg√∫n hardware disponible
    
    Args:
        password: Contrase√±a en texto plano
        
    Returns:
        str: Hash bcrypt seguro para almacenar en base de datos
        
    Utilizado en:
        - Creaci√≥n inicial de usuarios administradores
        - Verificaci√≥n posterior en state.py con bcrypt.checkpw()
    """
    hashed_bytes = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    return hashed_bytes.decode('utf-8')

def get_password_for_user(env_var: str, default: str) -> str:
    """
    Obtiene contrase√±a desde variable de entorno o usa fallback por defecto.
    
    Este patr√≥n permite:
    - Desarrollo local: usar contrase√±as por defecto
    - Producci√≥n: usar contrase√±as seguras desde .env
    - Flexibilidad: cada instituci√≥n puede tener contrase√±a √∫nica
    
    Args:
        env_var: Nombre de la variable de entorno (ej: "CENUR_PASSWORD")
        default: Contrase√±a por defecto si no existe la variable
        
    Returns:
        str: Contrase√±a a usar para el usuario
        
    Patr√≥n de uso:
        password = get_password_for_user("CENUR_PASSWORD", "default_pass")
    """
    return os.getenv(env_var, default)

# ================================================================================
# FUNCI√ìN PRINCIPAL DE POBLADO
# ================================================================================

def seed_database():
    """
    Funci√≥n principal que puebla la base de datos con datos iniciales.
    
    FLUJO DE EJECUCI√ìN:
    1. Verificar si ya hay datos (idempotencia)
    2. Insertar instituciones educativas de Salto
    3. Crear usuarios administradores con contrase√±as individuales
    4. Cargar cursos de ejemplo para cada instituci√≥n
    5. Mostrar resumen de seguridad y recomendaciones
    
    DATOS CARGADOS:
    - 5 instituciones reales de Salto, Uruguay
    - 5 usuarios administradores (uno por instituci√≥n)
    - 10 cursos de ejemplo distribuidos entre instituciones
    
    SEGURIDAD IMPLEMENTADA:
    - Contrase√±as individuales por instituci√≥n desde .env
    - Hash bcrypt para todas las contrase√±as
    - Verificaci√≥n de variables de entorno vs defaults
    - Logging detallado para auditor√≠a
    
    IDEMPOTENCIA:
    - Verifica datos existentes antes de proceder
    - No duplica informaci√≥n si ya existe
    - Seguro ejecutar m√∫ltiples veces
    
    Returns:
        bool: True si exitoso, False si fall√≥
    """
    
    try:
        print("üîó Conectando a la base de datos...")
        
        with Session(engine) as session:
            # Verificar si ya hay datos
            instituciones_count = session.exec(select(Institucion)).all()
            
            if len(instituciones_count) > 0:
                print(f"üìä La base de datos ya tiene datos ({len(instituciones_count)} instituciones).")
                usuarios_count = session.exec(select(Usuario)).all()
                cursos_count = session.exec(select(Curso)).all()
                print(f"   Usuarios: {len(usuarios_count)}, Cursos: {len(cursos_count)}")
                print("‚úÖ Base de datos ya est√° poblada.")
                return True
            
            print("üè¢ Insertando instituciones...")
            
            # Verificar o crear la ciudad 'Salto'
            ciudad_salto = session.exec(select(Ciudad).where(Ciudad.nombre == "Salto")).first()
            if not ciudad_salto:
                ciudad_salto = Ciudad(nombre="Salto")
                session.add(ciudad_salto)
                session.commit()
                session.refresh(ciudad_salto)

            # Datos de las instituciones con sus sedes
            instituciones_data = [
                {
                    "nombre": "UDELAR ‚Äì CENUR LN",
                    "logo": "/logos/logo-cenur.png",
                    "sede": {
                        "direccion": "Rivera 1350",
                        "telefono": "47334816",
                        "email": "comunicacion@unorte.edu.uy",
                        "web": "https://www.litoralnorte.udelar.edu.uy/"
                    }
                },
                {
                    "nombre": "IAE Salto",
                    "logo": "/logos/logoutu.png",
                    "sede": {
                        "direccion": "Misiones 192",
                        "telefono": "47354602",
                        "email": "iaesalto@gmail.com",
                        "web": None
                    }
                },
                {
                    "nombre": "Esc. Catalina H. de Casta√±os",
                    "logo": "/logos/logoutu.png",
                    "sede": {
                        "direccion": "Varela 440",
                        "telefono": "47335987",
                        "email": "ttssalto@gmail.com",
                        "web": None
                    }
                },
                {
                    "nombre": "Esc. De Administraci√≥n",
                    "logo": "/logos/logoutu.png",
                    "sede": {
                        "direccion": "Juan C. Gomez 351",
                        "telefono": "47323778",
                        "email": "etays.salto@gmail.com",
                        "web": None
                    }
                },
                {
                    "nombre": "Esc. Agraria",
                    "logo": "/logos/logoutu.png",
                    "sede": {
                        "direccion": "Ruta a Salto Grande S/N",
                        "telefono": "47322862",
                        "email": "esagrariasalto@gmail.com",
                        "web": None
                    }
                },
                {
                    "nombre": "Universidad de Montevideo",
                    "logo": "/logos/logoutu.png",
                    "sede": {
                        "direccion": "Av. 18 de Julio 1968",
                        "telefono": "27074444",
                        "email": "info@um.edu.uy",
                        "web": "https://www.um.edu.uy/"
                    }
                }
            ]
            
            for i, inst_data in enumerate(instituciones_data):
                # Crear instituci√≥n
                institucion = Institucion(
                    nombre=inst_data["nombre"],
                    logo=inst_data["logo"]
                )
                session.add(institucion)
                session.commit()  # Para obtener el id de la instituci√≥n
                session.refresh(institucion)
                print(f"   ‚úÖ {institucion.nombre}")
                
                # Determinar ciudad seg√∫n la instituci√≥n
                if inst_data["nombre"] == "Universidad de Montevideo":
                    # Buscar o crear ciudad Montevideo
                    ciudad_montevideo = session.exec(select(Ciudad).where(Ciudad.nombre == "Montevideo")).first()
                    if not ciudad_montevideo:
                        ciudad_montevideo = Ciudad(nombre="Montevideo")
                        session.add(ciudad_montevideo)
                        session.commit()
                        session.refresh(ciudad_montevideo)
                    ciudad_id = ciudad_montevideo.id
                    ciudad_nombre = "Montevideo"
                else:
                    ciudad_id = ciudad_salto.id
                    ciudad_nombre = "Salto"
                
                # Crear sede asociada
                sede = Sede(
                    institucion_id=institucion.id,
                    ciudad_id=ciudad_id,
                    direccion=inst_data["sede"]["direccion"],
                    telefono=inst_data["sede"]["telefono"],
                    email=inst_data["sede"]["email"],
                    web=inst_data["sede"]["web"]
                )
                session.add(sede)
                print(f"      üè¢ Sede creada para {institucion.nombre} en {ciudad_nombre}")
            session.commit()
            
            print("üë• Insertando usuarios con contrase√±as individuales...")
            
            # Obtener contrase√±a por defecto
            default_password = os.getenv("DEFAULT_SEED_PASSWORD", "CHANGE_THIS_PASSWORD_NOW")
            
            # Crear usuarios con contrase√±as individuales desde .env
            usuarios_config = [
                {
                    "email": "cenur@cenur.com",
                    "env_var": "CENUR_PASSWORD",
                    "institucion_id": 1,
                    "institucion_nombre": "UDELAR ‚Äì CENUR LN"
                },
                {
                    "email": "iae@iae.com", 
                    "env_var": "IAE_PASSWORD",
                    "institucion_id": 2,
                    "institucion_nombre": "IAE Salto"
                },
                {
                    "email": "catalina@catalina.com",
                    "env_var": "CATALINA_PASSWORD", 
                    "institucion_id": 3,
                    "institucion_nombre": "Esc. Catalina H. de Casta√±os"
                },
                {
                    "email": "administracion@administracion.com",
                    "env_var": "ADMINISTRACION_PASSWORD",
                    "institucion_id": 4,
                    "institucion_nombre": "Esc. De Administraci√≥n"
                },
                {
                    "email": "agraria@agraria.com",
                    "env_var": "AGRARIA_PASSWORD",
                    "institucion_id": 5,
                    "institucion_nombre": "Esc. Agraria"
                }
            ]
            
            usuarios_insertados = []
            for config in usuarios_config:
                # Obtener contrase√±a individual o usar la por defecto
                password = get_password_for_user(config["env_var"], default_password)
                hashed_password = hash_password(password)
                
                usuario = Usuario(
                    correo=config["email"],
                    password_hash=hashed_password,
                    institucion_id=config["institucion_id"]
                )
                session.add(usuario)
                
                usuarios_insertados.append({
                    "email": config["email"],
                    "institucion": config["institucion_nombre"],
                    "env_var": config["env_var"],
                    "has_custom_password": os.getenv(config["env_var"]) is not None
                })
                
                print(f"   ‚úÖ {config['email']} - {config['institucion_nombre']}")
            
            session.commit()
            
            print("üèôÔ∏è Insertando ciudades...")
            # Crear ciudades (capitales departamentales + Virtual)
            ciudades = [
                "Virtual", "Artigas", "Canelones", "Melo", "Colonia del Sacramento", "Durazno", "Trinidad", "Florida", "Minas", "Maldonado", "Paysand√∫", "Fray Bentos", "Rivera", "Rocha", "San Jos√© de Mayo", "Mercedes", "Tacuaremb√≥", "Treinta y Tres"
            ]
            ciudad_objs = []
            for nombre in ciudades:
                ciudad = Ciudad(nombre=nombre)
                session.add(ciudad)
                ciudad_objs.append(ciudad)
                print(f"   ‚úÖ {nombre}")
            
            session.commit()
            
            # Agregar la ciudad Salto (que ya existe) al inicio de la lista
            ciudad_objs.insert(0, ciudad_salto)
            
            print("üìö Insertando cursos...")
            
            # Definir cursos con sus ciudades (usando √≠ndices de ciudad_objs)
            cursos_data = [
                # UDELAR ‚Äì CENUR LN (id=1)
                {
                    "nombre": "Licenciatura en Inform√°tica",
                    "nivel": "Universitario",
                    "duracion_numero": "4",
                    "duracion_unidad": "a√±os",
                    "requisitos_ingreso": "Bachillerato",
                    "informacion": "Programa con fuerte √©nfasis en desarrollo de software.",
                    "institucion_id": 1,
                    "ciudades": [ciudad_objs[15]]  # Salto
                },
                {
                    "nombre": "Taller de Introducci√≥n a la Rob√≥tica",
                    "nivel": "Terciario",
                    "duracion_numero": "6",
                    "duracion_unidad": "meses",
                    "requisitos_ingreso": "Ciclo b√°sico",
                    "informacion": "Laboratorio con kits Arduino incluidos.",
                    "institucion_id": 1,
                    "ciudades": [ciudad_objs[15], ciudad_objs[0]]  # Salto y Virtual
                },
                
                # IAE Salto (id=2)
                {
                    "nombre": "Gesti√≥n de Emprendimientos",
                    "nivel": "Terciario",
                    "duracion_numero": "5",
                    "duracion_unidad": "meses",
                    "requisitos_ingreso": "Bachillerato",
                    "informacion": "Plan de negocios y mentor√≠a con incubadoras locales.",
                    "institucion_id": 2,
                    "ciudades": [ciudad_objs[15]]  # Salto
                },
                {
                    "nombre": "Marketing Digital y E-Commerce",
                    "nivel": "Terciario",
                    "duracion_numero": "4",
                    "duracion_unidad": "meses",
                    "requisitos_ingreso": "Ciclo b√°sico",
                    "informacion": "Campa√±as reales en redes sociales.",
                    "institucion_id": 2,
                    "ciudades": [ciudad_objs[15], ciudad_objs[0]]  # Salto y Virtual
                },
                
                # Esc. Catalina H. de Casta√±os (id=3)
                {
                    "nombre": "Electricidad Domiciliaria",
                    "nivel": "Terciario",
                    "duracion_numero": "4",
                    "duracion_unidad": "meses",
                    "requisitos_ingreso": "Ciclo b√°sico",
                    "informacion": "Pr√°cticas en instalaciones reales.",
                    "institucion_id": 3,
                    "ciudades": [ciudad_objs[15]]  # Salto
                },
                {
                    "nombre": "Carpinter√≠a B√°sica",
                    "nivel": "Terciario",
                    "duracion_numero": "6",
                    "duracion_unidad": "meses",
                    "requisitos_ingreso": "Ciclo b√°sico",
                    "informacion": "Proyectos pr√°cticos.",
                    "institucion_id": 3,
                    "ciudades": [ciudad_objs[15]]  # Salto
                },
                
                # Esc. De Administraci√≥n (id=4)
                {
                    "nombre": "Administraci√≥n de Empresas",
                    "nivel": "Bachillerato",
                    "duracion_numero": "3",
                    "duracion_unidad": "a√±os",
                    "requisitos_ingreso": "Ciclo b√°sico",
                    "informacion": "Formaci√≥n integral en gesti√≥n empresarial.",
                    "institucion_id": 4,
                    "ciudades": [ciudad_objs[15]]  # Salto
                },
                {
                    "nombre": "Contabilidad B√°sica",
                    "nivel": "Terciario",
                    "duracion_numero": "6",
                    "duracion_unidad": "meses",
                    "requisitos_ingreso": "Ciclo b√°sico",
                    "informacion": "Uso de software contable.",
                    "institucion_id": 4,
                    "ciudades": [ciudad_objs[15], ciudad_objs[0]]  # Salto y Virtual
                },
                
                # Esc. Agraria (id=5)
                {
                    "nombre": "T√©cnico Agropecuario",
                    "nivel": "Bachillerato",
                    "duracion_numero": "3",
                    "duracion_unidad": "a√±os",
                    "requisitos_ingreso": "Ciclo b√°sico",
                    "informacion": "Pr√°cticas en campo y laboratorio propio.",
                    "institucion_id": 5,
                    "ciudades": [ciudad_objs[15]]  # Salto
                },
                {
                    "nombre": "Horticultura Org√°nica",
                    "nivel": "Terciario",
                    "duracion_numero": "8",
                    "duracion_unidad": "meses",
                    "requisitos_ingreso": "Ciclo b√°sico",
                    "informacion": "Invernadero experimental.",
                    "institucion_id": 5,
                    "ciudades": [ciudad_objs[15]]  # Salto
                }
            ]
            
            for curso_data in cursos_data:
                ciudades = curso_data.pop("ciudades")  # Extraer ciudades del dict
                curso = Curso(**curso_data)
                curso.ciudades = ciudades  # Asignar ciudades usando la relaci√≥n many-to-many
                session.add(curso)
                print(f"   ‚úÖ {curso.nombre}")
            
            session.commit()
            
            print("\nüéâ ¬°Base de datos poblada exitosamente!")
            print(f"üìä Se crearon {len(instituciones_data)} instituciones, {len(usuarios_insertados)} usuarios y {len(cursos_data)} cursos.")
            
            # Mostrar informaci√≥n de seguridad
            print("\nüîë Usuarios creados con contrase√±as individuales:")
            users_with_custom = 0
            for usuario in usuarios_insertados:
                status = "üîê Personalizada" if usuario["has_custom_password"] else "‚ö†Ô∏è Por defecto"
                print(f"   üìß {usuario['email']}")
                print(f"      üè¢ {usuario['institucion']}")
                print(f"      üîë Variable: {usuario['env_var']} - {status}")
                if usuario["has_custom_password"]:
                    users_with_custom += 1
            
            print(f"\nüìä Resumen de seguridad:")
            print(f"   ‚úÖ Usuarios con contrase√±a personalizada: {users_with_custom}")
            print(f"   ‚ö†Ô∏è Usuarios con contrase√±a por defecto: {len(usuarios_insertados) - users_with_custom}")
            
            if users_with_custom < len(usuarios_insertados):
                print(f"\n‚ö†Ô∏è  RECOMENDACI√ìN DE SEGURIDAD:")
                print(f"   Algunos usuarios usan la contrase√±a por defecto.")
                print(f"   En producci√≥n, configura todas las variables en el .env")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Error durante el seed de la base de datos: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = seed_database()
    if success:
        print("\n‚úÖ Seed completado exitosamente.")
    else:
        print("\n‚ùå Seed fall√≥. Revisa los errores anteriores.")
        exit(1)